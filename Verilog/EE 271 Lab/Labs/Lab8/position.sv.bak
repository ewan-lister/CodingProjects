// This module calculates the position
// of the flappy bird using an FSM.
// Inputs: CLK, RST, velocity of flappy bird three bit
// two's complement integer.
// Outputs: Flappy Bird's present position, as a 4 bit
// value

module position(pos, velocity, CLK, RST);

		input logic CLK, RST;
		input logic [2:0] velocity;
		output logic [3:0] pos;
		
		enum logic [4:0] {zero = 4'b0000, one = 4'b0001, two = 4'b0010, three = 4'b0011, 
								four = 4'b0100, five = 4'b0101, six = 4'b0110, seven = 4'b0111,
								eight = 4'b1000, nine = 4'b1001, ten = 4'b1010, eleven = 4'b1011,
								twelve = 4'b1100, thirteen 4'b1101, fourteen = 4'b1110, fifteen = 4'b1111} ps, ns;
								
		
		// ps represents present position of flappy bird within a 16 pixel column, 
		// if the flappy birds velocity is negative, then within one clock cycle
		// flappy bird will travel down by the magnitude of the velocity.
		// If positive, flappy bird will travel up by it's velocity's magnitude in
		// pixels. e.g velocity = 010 = 2 -- flappy bird travels up two pixels per
		// clock cycle.
		always_comb begin
					case (velocity[2])
									
									1'b0: if (ps + velocity[1:0] < 16) ns = ps + velocity[1:0];
											else ns = fifteen;
									
									1'b1: if (ps - velocity[1:0] > -1) ns = ps - velocity[1:0];
											else ns = 0;
								
					endcase
		end
		
		// Output logic - could also be implemented as another always_comb block
		// Output is set to bit value of present state.
		assign pos = ps;
		// D Flip Flop implementation (DFFs)
		always_ff @(posedge CLK) begin
					if (RST)
								ps <= eight; //Returns to 0 pixel/s state when reset is active
					else
								ps <= ns; //Otherwise, advances to next state
		end
		
endmodule

module position_testbench();


		logic CLK, RST;
		logic [2:0] velocity;
		logic [4:0] pos;
		
		position dut (pos, velocity, CLK, RST);
		
		
		parameter CLOCK_PERIOD=100;
			initial begin
						CLK <= 0;
						forever #(CLOCK_PERIOD/2) CLK <= ~CLK;//toggle the clock indefinitely
			end 
   
			// Set up the inputs to the design.  Each line represents a clock cycle 
			// Simulation sends the state machine into all 7 possible states
			initial begin
							RST = 1;									@(posedge CLK);			
							velocity = 3'b000;									@(posedge CLK);// v = 0
							RST = 0;									@(posedge CLK);
																@(posedge CLK);// v = 1
																@(posedge CLK);// v = 2
																@(posedge CLK);// v = 3
																@(posedge CLK);// v = 3
																@(posedge CLK);// v = 3
							UserInput = 0;									@(posedge CLK);
																@(posedge CLK);// v = 0
							UserInput = 1;					@(posedge CLK);// v = -1
																@(posedge CLK);// v = 0
							UserInput = 0;					@(posedge CLK);// v = 1
																@(posedge CLK);// v = 0
																@(posedge CLK);// v = -1
																@(posedge CLK);// v = -2
																@(posedge CLK);// v = -3
																@(posedge CLK);// v = -3
																@(posedge CLK);// v = -3
							UserInput = 1;									@(posedge CLK);
																@(posedge CLK);// v = 0;
																@(posedge CLK);
																@(posedge CLK);

			$stop; // End the simulation.
	end
endmodule


