// Module determines the behavior of the middle LED
// for the tug of war game.
module led5(lrled, move, islit, reset, clk);

		input logic [1:0] lrled; 
		input logic move, reset, clk;
		output logic islit;
		logic movecode;
		movecode = {move, islit};
		
		enum {lit, unlit} ps, ns;
		
				always_comb begin
					case (ps)
								lit: if (move == 0) begin
												ns = lit;
												islit = 1;
											end
										else begin										
												ns = unlit; // transition if wind is right-to-left
												islit = 0;
										end	

								unlit: if (movecode ==  4'b1001|| movecode = 4'b0110) begin
												ns = lit;
												islit = 1;
											end
										else begin
												ns = unlit;
												islit = 0;
										end
					endcase
		end
		
		// Output logic - could also be implemented as another always_comb block
		// Output is set to bit value of present state.
		assign out = islit;
		// D Flip Flop implementation (DFFs)
		always_ff @(posedge clk) begin
					if (reset)
								ps <= lit; //Returns to b101 state when reset is active
					else
								ps <= ns; //Otherwise, advances to next state in state diagram
		end
		
endmodule


module led5_testbench();

		logic [1:0] lrled; 
		logic move, islit, reset, clk;
		
		led5 dut (lrled, move, islit, reset, clk);
		
		parameter CLOCK_PERIOD=100;
			initial begin
						clk <= 0;
						forever #(CLOCK_PERIOD/2) clk <= ~clk;//toggle the clock indefinitely
			end 
			
		
			initial begin
																@(posedge clk);
						 reset <= 1;    					@(posedge clk); // Always reset FSMs at start
						 reset <= 0; 				   	@(posedge clk);
																@(posedge clk);
																@(posedge clk);
						lrled = 2'b00; move = 2'b00;	@(posedge clk); // islit = 1
																@(posedge clk);
																@(posedge clk);
						lrled = 2b'01; move = 2'b00	@(posedge clk);
																@(posedge clk); // out = 00
						lrled = 0; move = 2;				@(posedge clk);
																@(posedge clk);// out = 10
						lrled = 0; move = 1;		      @(posedge clk);// out = 00
																@(posedge clk);
						lrled = 2; move = 1;				@(posedge clk);
																@(posedge clk);
						lrled = 0; move = 1;				@(posedge clk);
																@(posedge clk);
						lrled = 1; move = 2;				@(posedge clk);
																@(posedge clk);
																@(posedge clk);
																@(posedge clk);
																@(posedge clk);
			$stop; // End the simulation.
	end
endmodule

