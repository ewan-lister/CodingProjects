// This module processes user key-presses
// filtered through a d ff, such that a single
// held press is not registered as multiple presses.
module press_processor(p1press, p2press, pressbits, clk);

		input logic p1press, p2press;
		input logic clk;
		output logic [1:0] pressbits;
		
		logic rawpressbits;
		rawpressbits = {p1press, p2press};
		enum logic {init, rp1, rp2} ps, ns;
		
		
		// This logic describes all the possible state transitions from ps to ns
		
		// State machine moves through different cycles of states depending on input bits.
		// e.g "bits = 2'b00" --> 101-010-101-010
		always_comb begin
					case (ps)
								b101: if (bits == 2) ns = b100; // transition if wind is left-to-right
										else if (bits == 1) ns = b001; // transition if wind is right-to-left
										else if (bits == 0) ns = b010; // transition if wind is calm 
										else ns = b101;					 // no transition is bits = 2'b11
								b010: if (bits == 2) ns = b001;				// Conditional cycle repeated in each branch.
										else if (bits == 1) ns = b100; //		|
										else if (bits == 0) ns = b101; //		|
										else ns = b010;		     //		|
								b100: if (bits == 2) ns = b010;		     //		|
										else if (bits == 1) ns = b001;//		|
										else if (bits == 0) ns = b101;//		|
										else ns = b100;		     //	        \/
								b001: if (bits == 2) ns = b100;
										else if (bits == 1) ns = b010;
										else if (bits == 0) ns = b101;
										else ns = b001;
					endcase
		end
		
		// Output logic - could also be implemented as another always_comb block
		// Output is set to bit value of present state.
		assign out = ps;
		// D Flip Flop implementation (DFFs)
		always_ff @(posedge clk) begin
					if (reset)
								ps <= b101; //Returns to b101 state when reset is active
					else
								ps <= ns; //Otherwise, advances to next state in state diagram
		end
		logic